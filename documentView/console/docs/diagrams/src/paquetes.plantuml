@startuml mastermind
class  mastermind.Mastermind{
- game: Game
- view: View
- Mastermind()
+ {static} main(String[]): void
- play(): void
}
mastermind.Mastermind *-down-> mastermind.views.View
mastermind.Mastermind *-down-> mastermind.models.Game
@enduml

@startuml mastermind.views
class  mastermind.views.ColorView{
- {static} INITIALS: char []
- color: Color
~ ColorView(Color)
~ {static} allInitials(): String
~ {static} getInstance(char): Color
~ write()
}
mastermind.utils.ColorCode <..down- mastermind.views.ColorView

class  mastermind.views.ErrorView{
- {static} MESSAGES: String []
- error: Error
~ ErrorView(Error error)
~ writeln()
}
mastermind.models.Error <..down- mastermind.views.ErrorView
mastermind.views.ErrorView ..> mastermind.views.ColorView

enum  mastermind.views.MessageView{
+ {static} ATTEMPTS: MessageView
+ {static} SECRET_COMBINATION: MessageView
+ {static} RESUME: MessageView
+ {static} RESULT: MessageView
+ {static} PROPOSED_COMBINATION: MessageView
+ {static} TITLE: MessageView
+ {static} WINNER: MessageView
+ {static} LOOSER: MessageView
- message: String
~ MessageView(String)
~ write()
~ writeln()
~ writeln(int)
~ writeln(int, int)
}

class  mastermind.views.ProposalView{
- game: Game
- secretCombinationView: SecretCombinationView
~ ProposalView(Game)
~ interact(): boolean
}
mastermind.models.ProposedCombination <..down- mastermind.views.ProposalView
mastermind.utils.WithConsoleView <|-down- mastermind.views.ProposalView
mastermind.views.ProposalView ..> mastermind.models.Game
mastermind.views.ProposalView ..> mastermind.views.MessageView
mastermind.views.ProposalView ..> mastermind.views.SecretCombinationView
mastermind.views.ProposalView ..> mastermind.views.ProposedCombinationView
mastermind.views.ProposalView ..> mastermind.views.ResultView

class  mastermind.views.ProposedCombinationView{
- proposedCombination: ProposedCombination
~ ProposedCombinationView(ProposedCombination)
~ write()
~ read()
}
mastermind.utils.WithConsoleView <|-down- mastermind.views.ProposedCombinationView
mastermind.views.ProposedCombinationView..> mastermind.views.MessageView
mastermind.views.ProposedCombinationView..> mastermind.views.ColorView


class  mastermind.views.ResultView{
- result: Result
~ ResultView()
~ writeln()
}
mastermind.utils.WithConsoleView <|-down- mastermind.views.ResultView
mastermind.models.Result <..down- mastermind.views.ResultView
mastermind.views.ResultView..> mastermind.views.MessageView

class  mastermind.views.ResumeView{
- game: Game
~ ResumeView()
~ interact(): boolean
}
mastermind.views.ResumeView ..> mastermind.models.Game
mastermind.utils.YesNoDialog <..down- mastermind.views.ResumeView
mastermind.views.ResumeView..> mastermind.views.MessageView

class  mastermind.views.SecretCombinationView{
~ SecretCombinationView()
~ writeln()
}
mastermind.utils.WithConsoleView <|-down- mastermind.views.SecretCombinationView
mastermind.views.SecretCombinationView..> mastermind.views.MessageView

class  mastermind.views.StartView{
~ interact()
}
mastermind.utils.WithConsoleView <|-down- mastermind.views.StartView
mastermind.views.StartView ..> mastermind.models.Game
mastermind.views.StartView..> mastermind.views.MessageView
mastermind.views.StartView..> mastermind.views.SecretCombinationView

class  mastermind.views.View{
# game: Game
- startView: StartView
- proposalView: ProposalView
- resumeView: ResumeView
+ View(Game)
+ interact(): void
}
mastermind.views.View *-down-> mastermind.views.ProposalView
mastermind.views.View *-down-> mastermind.views.StartView
mastermind.views.View *-down-> mastermind.models.Game
mastermind.views.View *-down-> mastermind.views.ResumeView
@enduml

@startuml mastermind.models
class  mastermind.models.Color{
+ {static} RED: Color
+ {static} BLUE: Color
+ {static} YELLOW: Color
+ {static} GREEN: Color
+ {static} ORANGE: Color
+ {static} PURPLE: Color
- Color()
+ {static} valueOf(String): Color
~ {static} length(): int
~ {static} getInstance(int): Color
}

class  mastermind.models.Combination{
- {static} WIDTH: int
# colors: List<Color>
# Combination()
+ {static} getWidth(): int
}
mastermind.models.Combination *-down-> java.util.List
mastermind.models.Combination *-down-> mastermind.models.Color

class  mastermind.models.Error{
+ {static} DUPLICATED: Error
+ {static} WRONG_CHARACTERS: Error
+ {static} WRONG_LENGTH: Error
- Error()
+ {static} valueOf(String): Error
}

class  mastermind.models.Game{
+ {static} NO_ERROR: int
- {static} MAX_LONG: int
- secretCombination: SecretCombination
- proposedCombinations: List<ProposedCombination>
- results: List<Result>
- turn: int
+ Game()
+ clear(): void
+ proposeCombination(ProposedCombination): void
+ getWidth(): int
+ isLooser(): boolean
+ getTurn(): int
+ isWinner(): boolean
+ getCodes(): int[][][]
}
mastermind.models.Game *-down-> java.util.List
mastermind.models.Game *-down-> mastermind.models.SecretCombination
mastermind.models.Game *-down-> mastermind.models.Result
mastermind.models.Game --> mastermind.models.ProposedCombination

class  mastermind.models.ProposedCombination{
+ ProposedCombination()
~ contains(Color): boolean
~ contains(int, Color): boolean
+ {static} getInstance(int[]): ProposedCombination
+ {static} isValid(int[]): Error
~ getCodes(): int[]
}
mastermind.models.Combination <|-down- mastermind.models.ProposedCombination
mastermind.models.ProposedCombination ..> mastermind.models.Error

class  mastermind.models.Result{
- blacks: int
- whites: int
~ Result(int, int)
~ isWinner(): boolean
~ getCodes(): int[]
}

class  mastermind.models.SecretCombination{
~ SecretCombination()
~ getResult(ProposedCombination): Result
}
mastermind.models.Combination <|-down- mastermind.models.SecretCombination
mastermind.models.SecretCombination ..> mastermind.models.Result
mastermind.models.SecretCombination ..> mastermind.models.ProposedCombination
@enduml

@startuml mastermind.utils
class  mastermind.utils.ClosedInterval{
- min: int
- max: int
+ ClosedInterval(int, int)
+ includes(int): boolean
}

class  mastermind.utils.Console{
- bufferedReader: BufferedReader
+ Console()
+ write(char): void
+ write(String): void
+ readInt(String): int
+ readChar(String): char
- writeError(String): void
+ writeln(String): void
+ writeln(int): void
+ writeln(): void
+ readString(String): String
}
mastermind.utils.Console *-down-> java.io.BufferedReader

class  mastermind.utils.WithConsoleView{
# console: Console
# WithConsoleView()
}
mastermind.utils.WithConsoleView *-down-> mastermind.utils.Console

class  mastermind.utils.YesNoDialog{
- {static} AFIRMATIVE: char
- {static} NEGATIVE: char
- {static} QUESTION: String
- {static} MESSAGE: String
+ YesNoDialog()
+ read(String): boolean
- {static} isAfirmative(char): boolean
- {static} isNegative(char): boolean
}
mastermind.utils.WithConsoleView <|-down- mastermind.utils.YesNoDialog
@enduml
