@startuml mastermind
class usantatecla.mastermind.Mastermind{
- game: Game
- view: View
- Mastermind()
+ {static} main(String[]): void
- play(): void
}

usantatecla.mastermind.Mastermind *-down-> mastermind.views.View
usantatecla.mastermind.Mastermind *-down-> mastermind.models.Game

@enduml

@startuml mastermind.views
class ColorCode as "mastermind.utils.\nColorCode"{}
class Error as "mastermind.models.\nError"{}
class Color as "mastermind.models.\nColor"{}
class ProposedCombination as "mastermind.models.\nProposedCombination"{}
class WithConsoleView as "mastermind.utils.\nWithConsoleView"{}
class Result as "mastermind.models.\nResult"{}
class Game as "mastermind.models.\nGame"{}
class YesNoDialog as "mastermind.utils.\nYesNoDialog"{}
class Console as "mastermind.utils.\nConsole"{}

class mastermind.views.ColorView{
- {static} INITIALS: char []
~ ColorView(Color)
~ {static} allInitials(): String
~ {static} getInstance(char): Color
~ write()
}
ColorCode <..down- mastermind.views.ColorView
mastermind.views.ColorView *-down-> Color
WithConsoleView <|-down- mastermind.views.ColorView

class mastermind.views.ErrorView{
- {static} MESSAGES: String []
~ ErrorView(Error error)
~ writeln()
}
mastermind.views.ErrorView *-down-> Error
mastermind.views.ErrorView ..> mastermind.views.ColorView
mastermind.views.ErrorView ..> Console
WithConsoleView <|-down- mastermind.views.ErrorView

enum mastermind.views.MessageView{
+ ATTEMPTS
+ SECRET_COMBINATION
+ RESUME
+ RESULT
+ PROPOSED_COMBINATION
+ TITLE
+ WINNER
+ LOOSER
- message: String
~ MessageView(String)
~ write()
~ writeln()
~ writeln(int)
~ writeln(int, int)
}

mastermind.views.MessageView ..> Console

class mastermind.views.ProposalView {
~ ProposalView(Game)
~ interact(): boolean
}
ProposedCombination <..down- mastermind.views.ProposalView
WithConsoleView <|-down- mastermind.views.ProposalView
mastermind.views.ProposalView *-down-> Game
mastermind.views.ProposalView ..> mastermind.views.MessageView
mastermind.views.ProposalView *-down-> mastermind.views.SecretCombinationView
mastermind.views.ProposalView ..> mastermind.views.ProposedCombinationView
mastermind.views.ProposalView ..> mastermind.views.ResultView

class mastermind.views.ProposedCombinationView{
~ ProposedCombinationView(ProposedCombination)
~ write()
~ read()
}
WithConsoleView <|-down- mastermind.views.ProposedCombinationView
mastermind.views.ProposedCombinationView ..> mastermind.views.MessageView
mastermind.views.ProposedCombinationView *-down-> ProposedCombination
mastermind.views.ProposedCombinationView ..> mastermind.views.ColorView

class mastermind.views.ResultView {
~ ResultView()
~ writeln()
}
WithConsoleView <|-down- mastermind.views.ResultView
mastermind.views.ResultView *-down-> Result
mastermind.views.ResultView..> mastermind.views.MessageView

class mastermind.views.ResumeView {
~ ResumeView()
~ interact(): boolean
}
mastermind.views.ResumeView *-down-> Game
YesNoDialog <..down- mastermind.views.ResumeView
mastermind.views.ResumeView..> mastermind.views.MessageView

class mastermind.views.SecretCombinationView {
~ SecretCombinationView()
~ writeln()
}
WithConsoleView <|-down- mastermind.views.SecretCombinationView
mastermind.views.SecretCombinationView..> mastermind.views.MessageView

class mastermind.views.StartView {
~ interact()
}
WithConsoleView <|-down- mastermind.views.StartView
mastermind.views.StartView ..> Game
mastermind.views.StartView..> mastermind.views.MessageView
mastermind.views.StartView..> mastermind.views.SecretCombinationView

class mastermind.views.View {
+ View(Game)
+ interact()
}
mastermind.views.View *-down-> mastermind.views.ProposalView
mastermind.views.View *-down-> mastermind.views.StartView
mastermind.views.View *-down-> Game
mastermind.views.View *-down-> mastermind.views.ResumeView
@enduml

@startuml mastermind.models
enum mastermind.models.Color {
+ RED
+ BLUE
+ YELLOW
+ GREEN
+ ORANGE
+ PURPLE
~ {static} length(): int
}

abstract class mastermind.models.Combination {
- {static} WIDTH: int
# Combination()
+ {static} getWidth(): int
}
mastermind.models.Combination *-down-> "*" mastermind.models.Color

enum mastermind.models.Error {
+ DUPLICATED
+ WRONG_CHARACTERS
+ WRONG_LENGTH
}

class mastermind.models.Game {
- {static} MAX_LONG: int
- attempts: int
+ Game()
+ clear()
+ addProposeCombination(ProposedCombination)
+ isLooser(): boolean
+ isWinner(): boolean
+ getAttempts(): int
+ getProposedCombination(int): ProposedCombination
+ getResult(int): Result
}
mastermind.models.Game *-down-> mastermind.models.SecretCombination
mastermind.models.Game *-down-> mastermind.models.Result
mastermind.models.Game *-down-> "*" mastermind.models.ProposedCombination

class mastermind.models.ProposedCombination {
+ ProposedCombination()
~ contains(Color, int): boolean
~ contains(Color): boolean
+ getColors(): List<Color>
}
mastermind.models.Combination <|-down- mastermind.models.ProposedCombination
mastermind.models.ProposedCombination ..> mastermind.models.Error
mastermind.models.ProposedCombination ..> mastermind.models.Color

class mastermind.models.Result {
- blacks: int
- whites: int
~ Result(int, int)
~ isWinner(): boolean
+ getBlacks(): int
+ getWhites(): int
}

mastermind.models.ProposedCombination ..> mastermind.models.Combination

class mastermind.models.SecretCombination {
~ SecretCombination()
~ getResult(ProposedCombination): Result
}
mastermind.models.Combination <|-down- mastermind.models.SecretCombination
mastermind.models.SecretCombination ..> mastermind.models.Result
mastermind.models.SecretCombination ..> mastermind.models.ProposedCombination
mastermind.models.SecretCombination ..> mastermind.models.Color
@enduml

@startuml mastermind.utils
class BufferedReader as "java.io.BufferedReader"{}

enum mastermind.utils.ColorCode{
+ RED
+ BLUE
+ YELLOW
+ GREEN
+ ORANGE
+ PURPLE
+ RESET_COLOR
- color: String
~ ColorCode(String)
+ getColor(): String
+ {static} getColorByIndex(int): String
}

class  mastermind.utils.Console{
+ {static} console: Console
- bufferedReader: BufferedReader
+ {static} getInstance(): Console
+ readString(String): String
+ readString(): String
+ readInt(String): int
+ readChar(String): char
+ writeln()
+ write(String)
+ writeln(String)
+ write(char)
- writeError(String)
}
mastermind.utils.Console *-down-> BufferedReader

abstract class mastermind.utils.WithConsoleView{
# WithConsoleView()
}
mastermind.utils.WithConsoleView *-down-> mastermind.utils.Console

class  mastermind.utils.YesNoDialog{
- {static} AFIRMATIVE: char
- {static} NEGATIVE: char
- {static} QUESTION: String
- {static} MESSAGE: String
+ YesNoDialog()
+ read(String): boolean
+ read(): boolean
- {static} isAfirmative(char): boolean
- {static} isNegative(char): boolean
}
mastermind.utils.WithConsoleView <|-down- mastermind.utils.YesNoDialog
@enduml
