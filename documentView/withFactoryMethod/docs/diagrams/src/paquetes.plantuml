@startuml mastermind
class  usantatecla.mastermind.ConsoleMastermind{
+ ConsoleMastermind()
+ {static} main(String[]) 
~ createView(Game): View
}
usantatecla.mastermind.Mastermind <|-down- usantatecla.mastermind.ConsoleMastermind

class  usantatecla.mastermind.GraphicsMastermind{
+ GraphicsMastermind()
+ {static} main(String[]) 
~ createView(Game): View
}
usantatecla.mastermind.Mastermind <|-down- usantatecla.mastermind.GraphicsMastermind

class  usantatecla.mastermind.Mastermind{
- game: Game
- view: View
~ Mastermind()
~ {abstract} createView(Game): View
~ play() 
}

class View as "usantatecla.mastermind.views.View"{

}

Class Game as "usantatecla.mastermind.models.Game"{

}

usantatecla.mastermind.Mastermind --> View
usantatecla.mastermind.Mastermind --> Game

@enduml

@startuml mastermind.views
abstract class  usantatecla.mastermind.views.ColorView{
+{static} INITIALS: char[]
~color: Color
~ ColorView()
~ ColorView(Color)
+ allInitials(): String
+ {static} getInstance(char): Color
+ {abstract} resultinitials(int): String
}

class  usantatecla.mastermind.views.ErrorView{
+ message: String[]
~ error: Error
~ ErrorView()
+ ErrorView(Error)
~ {abstract} colorInitials(): String
}

enum  usantatecla.mastermind.views.MessageView{
+ TURN
+ SECRET
+ RESUME
+ RESULT
+ PROPOSED_COMBINATION
+ TITLE
+ WINNER
+ LOOSER
- message: String
- Message(String)
+ getMessage(): String
}

abstract class  usantatecla.mastermind.views.View{
~ game: Game
+ View(Game)
+ interact() 
~ {abstract} start() 
~ {abstract} isNewGame(): boolean
~ {abstract} propose(): boolean
}

class Game as "usantatecla.mastermind.models.Game"{

}
usantatecla.mastermind.views.View *-down-> Game
@enduml

@startuml mastermind.view.console
class WithConsoleView as "usantatecla.utils.\nWithConsoleView"{

}
class  usantatecla.mastermind.views.console.ConsoleView{
+ ConsoleView(Game)
~ start() 
~ resume(): boolean
~ propose(): boolean
}

class View as "usantatecla.mastermind.views.View"{

}
View <|-down- usantatecla.mastermind.views.console.ConsoleView
usantatecla.mastermind.views.console.ConsoleView *-down-> usantatecla.mastermind.views.console.ProposalView
usantatecla.mastermind.views.console.ConsoleView *-down-> usantatecla.mastermind.views.console.ResumeView
usantatecla.mastermind.views.console.ConsoleView *-down-> usantatecla.mastermind.views.console.StartView

class  usantatecla.mastermind.views.console.ProposalView{
- game: Game
~ ProposalView(Game)
~ interact(): boolean
}

class Game as "usantatecla.mastermind.models.Game"{

}
WithConsoleView <|-down- usantatecla.mastermind.views.console.ProposalView
usantatecla.mastermind.views.console.ProposalView ..> Game
usantatecla.mastermind.views.console.ProposalView ..> usantatecla.mastermind.views.console.ProposedCombinationView
usantatecla.mastermind.views.console.ProposalView *-down-> usantatecla.mastermind.views.console.SecretCombinationView
usantatecla.mastermind.views.console.ProposalView ..> usantatecla.mastermind.views.console.ResultView

class  usantatecla.mastermind.views.console.ProposedCombinationView{
- proposedCombination: ProposedCombination
~ ProposedCombinationView(ProposedCombination)
~ write()
~ read()
}
WithConsoleView <|-down- usantatecla.mastermind.views.console.ProposedCombinationView

class  usantatecla.mastermind.views.console.ResultView{
-result: Result
~ ResultView(Result)
~ writeln()
}
class  usantatecla.mastermind.views.console.AttemptsView{
- game: Game
~ AttemptsView(Game)
~ writeln()
}
WithConsoleView <|-down- usantatecla.mastermind.views.console.ResultView

class  usantatecla.mastermind.views.console.ResumeView{
~ ResumeView(Game)
~ interact(): boolean
}
usantatecla.mastermind.views.console.ResumeView ..> Game

class  usantatecla.mastermind.views.console.SecretCombinationView{
~ SecretCombinationView()
~ writeln() 
}


WithConsoleView <|-down- usantatecla.mastermind.views.console.SecretCombinationView

class  usantatecla.mastermind.views.console.StartView{
~ interact() 
}

class  usantatecla.mastermind.views.console.ErrorView{
~ ErrorView() 
~ ErrorView(Error) 
~ writeln()
~ colorInitials(): String
}

class  usantatecla.mastermind.views.console.ColorView{
    ~ ColorView()
    ~ ColorView(Color)
    ~ resultInitials(int): String
    ~ write()
}
class Color as "usantatecla.utils.\nColorCode"{

}

class Console as "usantatecla.utils.\nConsole"{

}
usantatecla.mastermind.views.console.ColorView .down-> Color
usantatecla.mastermind.views.console.ErrorView .down-> Console
usantatecla.mastermind.views.console.AttemptsView .down-> Game
WithConsoleView <|-down- usantatecla.mastermind.views.console.StartView
usantatecla.mastermind.views.console.StartView ..> Game
usantatecla.mastermind.views.console.StartView..> usantatecla.mastermind.views.console.SecretCombinationView
@enduml

@startuml mastermind.view.Graphics
class Game as "usantatecla.mastermind.models.Game"{
    
}
class usantatecla.mastermind.views.graphics.AttemptsView{
    ~AttemptsView(int)
}

class usantatecla.mastermind.views.graphics.ColorView{
    ~ColorView()
    ~ColorView(Color)
    ~resultInitials(int): String
}
class  usantatecla.mastermind.views.graphics.Constraints{
~ Constraints(int, int, int, int)
}

class  usantatecla.mastermind.views.graphics.GameView{
- {static} GAME_OVER: String
- secretCombinationView: SecretCombinationView
- proposedCombinationsView: ProposedCombinationsView
- proposalCombinationView: ProposalCombinationView
~ GameView()
- clear()  
~ start(Game)  
~ propose(Game): boolean
- proposeCombination(Game, int[]): int
- drawGameOver(Game): boolean
}

usantatecla.mastermind.views.graphics.GameView *-down-> usantatecla.mastermind.views.graphics.ProposedCombinationsView
usantatecla.mastermind.views.graphics.GameView *-down-> usantatecla.mastermind.views.graphics.SecretCombinationView
usantatecla.mastermind.views.graphics.GameView *-down-> usantatecla.mastermind.views.graphics.ProposalCombinationView
usantatecla.mastermind.views.graphics.GameView ..> Game
usantatecla.mastermind.views.graphics.GameView ..> usantatecla.mastermind.views.graphics.ProposedCombinationView
usantatecla.mastermind.views.graphics.GameView ..> usantatecla.mastermind.views.graphics.Constraints

class  usantatecla.mastermind.views.graphics.GraphicsView{
- gameView: GameView
+ GraphicsView(Game)
# start()  
# resume(): boolean
# propose(): boolean
}
class View as "usantatecla.mastermind.views.View"{

}
View <|-down- usantatecla.mastermind.views.graphics.GraphicsView
usantatecla.mastermind.views.graphics.GraphicsView *-down-> usantatecla.mastermind.views.graphics.GameView
usantatecla.mastermind.views.graphics.GraphicsView ..> usantatecla.mastermind.views.graphics.ResumeDialog

class  usantatecla.mastermind.views.graphics.ProposalCombinationView{
- {static} ACCEPT: String
- label: JLabel
- textField: JTextField
- button: JButton
- characters: String
~ ProposalCombinationView(JRootPane)
+ keyPressed(KeyEvent)  
+ keyReleased(KeyEvent)  
+ keyTyped(KeyEvent)  
~ resetCharacters()  
~ getCharacters(): String
+ actionPerformed(ActionEvent)  
}
usantatecla.mastermind.views.graphics.ProposalCombinationView..> usantatecla.mastermind.views.graphics.Constraints

class  usantatecla.mastermind.views.graphics.ProposedCombinationsView{
- game: Game
~ ProposedCombinationsView(Game)
~ add()  
}

usantatecla.mastermind.views.graphics.ProposedCombinationsView ..> Game
usantatecla.mastermind.views.graphics.ProposedCombinationsView..> usantatecla.mastermind.views.graphics.Constraints
usantatecla.mastermind.views.graphics.ProposedCombinationsView ..> usantatecla.mastermind.views.graphics.TurnView
usantatecla.mastermind.views.graphics.ProposedCombinationsView..> usantatecla.mastermind.views.graphics.ProposedCombinationView
usantatecla.mastermind.views.graphics.ProposedCombinationsView..> usantatecla.mastermind.views.graphics.ResultView

class  usantatecla.mastermind.views.graphics.ProposedCombinationView{
- proposedCombinationView: ProposedCombinationView
- error: Error
~ ProposedCombinationView(ProposedCombinationView)
~ read(String)
+ isValid(): boolean
}
usantatecla.mastermind.views.graphics.ProposedCombinationView..> usantatecla.mastermind.views.graphics.ProposedCombinationView

class  usantatecla.mastermind.views.graphics.ResultView{
- result: Result
~ ResultView(Result)
}

class  usantatecla.mastermind.views.graphics.ResumeDialog{
- newGame: boolean
~ ResumeDialog()
~ isNewGame(): boolean
}

class  usantatecla.mastermind.views.graphics.SecretCombinationView{
- {static} TITLE: String
- title: JLabel
- secretCombination: JLabel
~ SecretCombinationView()
} 
usantatecla.mastermind.views.graphics.SecretCombinationView..> usantatecla.mastermind.views.graphics.Constraints

@enduml

@startuml mastermind.models
enum usantatecla.mastermind.models.Color {
+ RED
+ BLUE
+ YELLOW
+ GREEN
+ ORANGE
+ PURPLE
~ {static} length(): int
}

abstract class usantatecla.mastermind.models.Combination {
- {static} WIDTH: int
~ colors: List<Color>
~ Combination()
+ {static} getWidth(): int
}
usantatecla.mastermind.models.Combination *-down-> "*" usantatecla.mastermind.models.Color

enum usantatecla.mastermind.models.Error {
+ DUPLICATED
+ WRONG_CHARACTERS
+ WRONG_LENGTH
}

class usantatecla.mastermind.models.Game {
- {static} MAX_LONG: int
- proposedCombinations: List<ProposedCombinations>
- results: List<Result>
- attempts: int
+ Game()
+ clear()
+ addProposeCombination(ProposedCombination)
+ isLooser(): boolean
+ isWinner(): boolean
+ getAttempts(): int
+ getProposedCombination(int): ProposedCombination
+ getResult(int): Result
}
usantatecla.mastermind.models.Game *-down-> usantatecla.mastermind.models.SecretCombination
usantatecla.mastermind.models.Game *-down-> "*" usantatecla.mastermind.models.Result
usantatecla.mastermind.models.Game *-down-> "*" usantatecla.mastermind.models.ProposedCombination

class usantatecla.mastermind.models.ProposedCombination {
contains(Color, int): boolean
contains(Color): boolean
+ getColors(): List<Color>
}
usantatecla.mastermind.models.Combination <|-down- usantatecla.mastermind.models.ProposedCombination
usantatecla.mastermind.models.ProposedCombination ..> usantatecla.mastermind.models.Error
usantatecla.mastermind.models.ProposedCombination ..> usantatecla.mastermind.models.Color

class usantatecla.mastermind.models.Result {
- blacks: int
- whites: int
Result(int, int)
isWinner(): boolean
+ getBlacks(): int
+ getWhites(): int
}

usantatecla.mastermind.models.ProposedCombination ..> usantatecla.mastermind.models.Combination

class usantatecla.mastermind.models.SecretCombination {
SecretCombination()
getResult(ProposedCombination): Result
}
usantatecla.mastermind.models.Combination <|-down- usantatecla.mastermind.models.SecretCombination
usantatecla.mastermind.models.SecretCombination ..> usantatecla.mastermind.models.Result
usantatecla.mastermind.models.SecretCombination ..> usantatecla.mastermind.models.ProposedCombination
usantatecla.mastermind.models.SecretCombination ..> usantatecla.mastermind.models.Color
@enduml

@startuml usantatecla.mastermind.utils
class BufferedReader as "java.io.BufferedReader"{}

enum usantatecla.mastermind.utils.ColorCode{
+ RED
+ BLUE
+ YELLOW
+ GREEN
+ ORANGE
+ PURPLE
+ RESET_COLOR
- color: String
~ ColorCode(String)
+ getColor(): String
+ {static} getColorByIndex(int): String
}

class  usantatecla.mastermind.utils.Console{
+ {static} console: Console
+ {static} getInstance(): Console
+ readString(String): String
+ readString(): String
+ readInt(String): int
+ readChar(String): char
+ writeln()
+ write(String)
+ writeln(String)
+ write(char)
- writeError(String)
}
usantatecla.mastermind.utils.Console *-down-> BufferedReader

abstract class usantatecla.mastermind.utils.WithConsoleView{
~ WithConsoleView()
}
usantatecla.mastermind.utils.WithConsoleView *-down-> usantatecla.mastermind.utils.Console

class  usantatecla.mastermind.utils.YesNoDialog{
- {static} AFIRMATIVE: char
- {static} NEGATIVE: char
- {static} QUESTION: String
- {static} MESSAGE: String
+ YesNoDialog()
+ read(String): boolean
+ read(): boolean
- {static} isAfirmative(char): boolean
- {static} isNegative(char): boolean
}
usantatecla.mastermind.utils.WithConsoleView <|-down- usantatecla.mastermind.utils.YesNoDialog
@enduml
