@startuml mastermind
class Logic as "usantatecla.\nmastermind.controllers.\nLogic"

class  usantatecla.mastermind.Mastermind{
- logic: Logic
- view: View
# Mastermind()
# play()
+ {static} main(String[])
}

class View as "usantatecla.mastermind.views.View" {


}
usantatecla.mastermind.Mastermind *-> View
usantatecla.mastermind.Mastermind *-down-> Logic

@enduml

@startuml usantatecla.mastermind.views
class PlayController as "usantatecla.mastermind.controllers.PlayController" {


}
class ResumeController as "usantatecla.mastermind.controllers.ResumeController" {


}
class StartController as "usantatecla.mastermind.controllers.StartController" {


}
class ControllersVisitor as "usantatecla.mastermind.controllers.ControllersVisitor" {


}
class AcceptorController as "usantatecla.mastermind.controllers.AcceptorController" {


}
class Console as "usantatecla.utils.Console" {


}
class Command as "usantatecla.utils.Command" {


}
class Menu as "usantatecla.utils.Menu" {


}

class  usantatecla.mastermind.views.ColorView{
+ {static} INITIALS: char[]
# color: Color
# ColorView()
# ColorView(Color)
+ {static} getInstance(char): Color
+ allInitials(): String
# resultInitials(int): String
+ write()
}
usantatecla.mastermind.views.ColorView ..> usantatecla.mastermind.views.ColorView

abstract class  usantatecla.mastermind.views.Command{
# playController: PlayController
# Command(PlayController, String)
}
Command <|-down- usantatecla.mastermind.views.Command
usantatecla.mastermind.views.Command *-down-> PlayController
usantatecla.mastermind.views.Command ..> usantatecla.mastermind.views.GameView
usantatecla.mastermind.views.Command..> usantatecla.mastermind.views.Message

class  usantatecla.mastermind.views.ErrorView{
+ MESSAGES: String[]
# error: Error
# ErrorView()
# ErrorView(Error)
+ writeln()
# colorInitials(): String
}
usantatecla.mastermind.views.ErrorView ..> usantatecla.mastermind.views.ErrorView
usantatecla.mastermind.views.ErrorView ..>  usantatecla.mastermind.views.ColorView

class  usantatecla.mastermind.views.GameView{
~ GameView(PlayController)
}
Console <|-down- usantatecla.mastermind.views.GameView
usantatecla.mastermind.views.GameView ..> PlayController
usantatecla.mastermind.views.GameView..> usantatecla.mastermind.views.SecretCombinationView
usantatecla.mastermind.views.GameView..>  usantatecla.mastermind.views.ProposedCombinationView
usantatecla.mastermind.views.GameView..>  usantatecla.mastermind.views.ResultView
usantatecla.mastermind.views.GameView..> usantatecla.mastermind.views.Message

enum  usantatecla.mastermind.views.Message{
~ ATTEMPTS
~ SECRET
~ RESUME
~ RESULT
~ PROPOSED_COMBINATION
~ TITLE
~ WINNER
~ LOOSER
~ PROPOSE_COMMAND
~ UNDO_COMMAND
~ REDO_COMMAND
~ NEW_LINE
- message: String
- Message(String)
+ getMessage(): String
+ writeln()
+ writeln(int)
+ writeln(int, int)
+ write()
}
usantatecla.mastermind.views.Message ..> usantatecla.mastermind.views.Message

class  usantatecla.mastermind.views.PlayMenu{
~ PlayMenu(PlayController)
}
Menu <|-down- usantatecla.mastermind.views.PlayMenu
usantatecla.mastermind.views.PlayMenu ..> PlayController
usantatecla.mastermind.views.PlayMenu *-down-> usantatecla.mastermind.views.ProposeCommand
usantatecla.mastermind.views.PlayMenu *-down-> usantatecla.mastermind.views.UndoCommand
usantatecla.mastermind.views.PlayMenu *-down-> usantatecla.mastermind.views.RedoCommand

class  usantatecla.mastermind.views.PlayView{
~ interact(PlayController)
}
Console <|-down- usantatecla.mastermind.views.PlayView
usantatecla.mastermind.views.PlayView ..> PlayController
usantatecla.mastermind.views.PlayView ..> usantatecla.mastermind.views.PlayMenu

class  usantatecla.mastermind.views.ProposeCommand{
~ ProposeCommand(PlayController)
# execute()
# isActive(): boolean
}
usantatecla.mastermind.views.Command <|-down- usantatecla.mastermind.views.ProposeCommand
usantatecla.mastermind.views.ProposeCommand ..> usantatecla.mastermind.views.ProposedCombinationView
usantatecla.mastermind.views.ProposeCommand ..> usantatecla.mastermind.views.ErrorView

class  usantatecla.mastermind.views.ProposedCombinationView{
- playController: PlayController
~ ProposedCombinationView(PlayController)
~ write(int)
~ read(): List<Color>
}
Console <|-down- usantatecla.mastermind.views.ProposedCombinationView
usantatecla.mastermind.views.ProposedCombinationView..> usantatecla.mastermind.views.Message
 usantatecla.mastermind.views.ProposedCombinationView ..>  usantatecla.mastermind.views.ColorView

class  usantatecla.mastermind.views.RedoCommand{
~ RedoCommand(PlayController)
# execute()
# isActive(): boolean
}
usantatecla.mastermind.views.Command <|-down- usantatecla.mastermind.views.RedoCommand

class  usantatecla.mastermind.views.ResultView{
- playController: PlayController
~ ResultView()
~ writeln(int)
}
Console <|-down- usantatecla.mastermind.views.ResultView
usantatecla.mastermind.views.ResultView..> usantatecla.mastermind.views.Message

class  usantatecla.mastermind.views.ResumeView{
~ interact(ResumeController)
}
usantatecla.mastermind.views.ResumeView ..> ResumeController
usantatecla.mastermind.views.ResumeView..> usantatecla.mastermind.views.Message

class  usantatecla.mastermind.views.SecretCombinationView{
- controller: Controller
~ SecretCombinationView(Controller)
~ writeln()
}
Console <|-down- usantatecla.mastermind.views.SecretCombinationView
usantatecla.mastermind.views.SecretCombinationView..> usantatecla.mastermind.views.Message

class  usantatecla.mastermind.views.StartView{
- secretCombinationView: SecretCombinationView
~ interact(StartController)
}
Console <|-down- usantatecla.mastermind.views.StartView
usantatecla.mastermind.views.StartView ..> StartController
usantatecla.mastermind.views.StartView ..> usantatecla.mastermind.views.SecretCombinationView
usantatecla.mastermind.views.StartView..> usantatecla.mastermind.views.Message

class  usantatecla.mastermind.views.UndoCommand{
~ UndoCommand(PlayController)
# execute()
# isActive(): boolean
}
usantatecla.mastermind.views.Command <|-down- usantatecla.mastermind.views.UndoCommand

class  usantatecla.mastermind.views.View{
- startView: StartView
- playView: PlayView
- resumeView: ResumeView
+ View()
+ visit(ResumeController)
+ visit(PlayController)
+ visit(StartController)
+ interact(AcceptorController)
}
ControllersVisitor <|-down- usantatecla.mastermind.views.View
usantatecla.mastermind.views.View *-down-> usantatecla.mastermind.views.PlayView
usantatecla.mastermind.views.View *-down-> usantatecla.mastermind.views.StartView
usantatecla.mastermind.views.View *-down-> usantatecla.mastermind.views.ResumeView
usantatecla.mastermind.views.View ..> AcceptorController
@enduml

@startuml usantatecla.mastermind.controllers
class Map as "java.util.Map" {


}
class Session as "usantatecla.mastermind.models.Session" {


}
class StateValue as "usantatecla.mastermind.models.StateValue" {


}
interface  mastermind.controllers.AcceptorController{
+ accept(ControllersVisitor)
}
mastermind.controllers.Controller <|-down- mastermind.controllers.AcceptorController
mastermind.controllers.AcceptorController ..> mastermind.controllers.ControllersVisitor

class  mastermind.controllers.Controller{
# session: Session
~ Controller(Session)
+ getWidth(): int
}
mastermind.controllers.Controller -down-> Session


interface  mastermind.controllers.ControllersVisitor{
~ visit(StartController)
~ visit(PlayController)
~ visit(ResumeController)
}
mastermind.controllers.ControllersVisitor ..> mastermind.controllers.ResumeController
mastermind.controllers.ControllersVisitor ..> mastermind.controllers.StartController
mastermind.controllers.ControllersVisitor ..> mastermind.controllers.PlayController

class  mastermind.controllers.Logic{
- session: Session
- acceptorControllers: Map<StateValue, AcceptorController>
+ Logic()
+ getController(): AcceptorController
}

mastermind.controllers.Logic *-down-> Session
mastermind.controllers.Logic *-down-> StateValue
mastermind.controllers.Logic *-down-> Map

mastermind.controllers.Logic *-> mastermind.controllers.AcceptorController

class  mastermind.controllers.PlayController{
- proposalController: ProposalController
- undoController: UndoController
- redoController: RedoController
+ PlayController(Session)
+ accept(ControllersVisitor)
+ addProposeCombination(List<Color>): Error
+ undoable(): boolean
+ redoable(): boolean
+ undo()
+ isLooser(): boolean
+ redo()
+ isWinner(): boolean
+ getAttempts(): int
+ getColors(int): List<Color>
+ getBlacks(int): int
+ getWhites(int): int
}
mastermind.controllers.AcceptorController <|-down- mastermind.controllers.PlayController
mastermind.controllers.PlayController *-down-> mastermind.controllers.RedoController
mastermind.controllers.PlayController *-down-> mastermind.controllers.UndoController
mastermind.controllers.PlayController *-down-> mastermind.controllers.ProposalController
mastermind.controllers.PlayController ..> Session

class  mastermind.controllers.ProposalController{
~ ProposalController(Session)
~ addProposeCombination(List<Color>): Error
~ isLooser(): boolean
~ isWinner(): boolean
~ getAttempts(): int
~ getColors(int): List<Color>
~ getBlacks(int): int
~ getWhites(int): int
}
mastermind.controllers.Controller <|-down- mastermind.controllers.ProposalController

class  mastermind.controllers.RedoController{
~ RedoController(Session)
~ redoable(): boolean
~ redo()
}
mastermind.controllers.Controller <|-down- mastermind.controllers.RedoController

class  mastermind.controllers.ResumeController{
+ ResumeController(Session)
+ accept(ControllersVisitor)
+ resume(boolean)
}
mastermind.controllers.AcceptorController <|-down- mastermind.controllers.ResumeController
mastermind.controllers.ResumeController ..> Session

class  mastermind.controllers.StartController{
+ StartController(Session)
+ accept(ControllersVisitor)
+ start()
}
mastermind.controllers.AcceptorController <|-down- mastermind.controllers.StartController
mastermind.controllers.StartController ..> Session

class  mastermind.controllers.UndoController{
~ UndoController(Session)
~ undoable(): boolean
~ undo()
}
mastermind.controllers.Controller <|-down- mastermind.controllers.UndoController
@enduml

@startuml usantatecla.mastermind.models
class List as "java.util.List" {


}
class ArrayList as "java.util.ArrayList" {


}
class Logic as "usantatecla.mastermind.controllers.Logic" {


}

class ResumeController as "usantatecla.mastermind.controllers.ResumeController" {


}

class StartController as "usantatecla.mastermind.controllers.StartController" {


}

class ProposalController as "usantatecla.mastermind.controllers.ProposalController" {


}

class usantatecla.mastermind.models.State {
    - stateValue: StateValue
    ~ state()
    ~ next()
    ~ reset()
    ~ getValueState(): StateValue
}

enum usantatecla.mastermind.models.StateValue {
    + INITIAL
    + IN_GAME
    + FINAL
    + EXIT
} 

abstract class usantatecla.mastermind.models.Combination {
- {static} WIDTH: int
# colors: List<Color>
# Combination()
+ {static} getWidth(): int
}
usantatecla.mastermind.models.Combination *-down-> "*" usantatecla.mastermind.types.Color
usantatecla.mastermind.models.State *-down-> usantatecla.mastermind.models.StateValue
Logic *-down-> usantatecla.mastermind.models.State
ProposalController -down-> usantatecla.mastermind.models.State
ResumeController -down-> usantatecla.mastermind.models.State
StartController -down-> usantatecla.mastermind.models.State

class usantatecla.mastermind.models.Game {
- {static} MAX_LONG: int
- secretCombination: SecretCombination
- proposedCombination: List<ProposedCombination>
- results: List<Result>
- attempts: int
~ Game()
~ clear()
~ addProposeCombination(List<Color>)
~ isLooser(): boolean
~ isWinner(): boolean
~ getAttempts(): int
~ getColors(int): List<Color>
~ getBlacks(int): int
~ getWhites(int): int
~ getWidth(): int
~ createMemento(): Memento
~ set(Memento)
}
usantatecla.mastermind.models.Game *-down-> usantatecla.mastermind.models.SecretCombination
usantatecla.mastermind.models.Game *-down-> "0..*" usantatecla.mastermind.models.Result
usantatecla.mastermind.models.Game *-down-> "0..*" usantatecla.mastermind.models.ProposedCombination

class usantatecla.mastermind.models.ProposedCombination {
+ proposedCombination(List<Color>)
~ contains(Color, int): boolean
~ contains(Color): boolean
~ copy(): ProposedCombination
+ {static} builder: Builder
+ {static} class Builder()
}
usantatecla.mastermind.models.Combination <|-down- usantatecla.mastermind.models.ProposedCombination
usantatecla.mastermind.models.ProposedCombination ..> usantatecla.mastermind.types.Color

class usantatecla.mastermind.models.SecretCombination {
~ SecretCombination()
~ getResult(ProposedCombination): Result
}
usantatecla.mastermind.models.Combination <|-down- usantatecla.mastermind.models.SecretCombination
usantatecla.mastermind.models.SecretCombination ..> usantatecla.mastermind.models.Result
usantatecla.mastermind.models.SecretCombination ..> usantatecla.mastermind.models.ProposedCombination
usantatecla.mastermind.models.SecretCombination ..> usantatecla.mastermind.types.Color

class usantatecla.mastermind.models.Result {
- blacks: int
- whites: int
~ Result(int, int)
~ isWinner(): boolean
~ getBlacks(): int
~ getWhites(): int
~ copy(): Result
}

usantatecla.mastermind.models.Result -down..> usantatecla.mastermind.models.Combination

enum usantatecla.mastermind.types.Color {
+ RED
+ BLUE
+ YELLOW
+ GREEN
+ ORANGE
+ PURPLE
+ NULL
~ {static} length(): int
+ isNull(): boolean
}

enum usantatecla.mastermind.types.Error {
+ DUPLICATED
+ WRONG_CHARACTERS
+ WRONG_LENGTH
+ NULL
+ isNull(): boolean
}

class  usantatecla.mastermind.models.Memento{
- proposedCombinations: List<ProposedCombination>
- results: List<Result>
- turn: int
~ Memento(int)
~ set(ProposedCombination, Result)
~ getSize(): int
~ getResult(int): Result
~ getAttempts(): int
~ getProposedCombination(int): ProposedCombination
}
usantatecla.mastermind.models.Memento *-down-> List
usantatecla.mastermind.models.Memento --> usantatecla.mastermind.models.Result
usantatecla.mastermind.models.Memento --> usantatecla.mastermind.models.ProposedCombination

class  usantatecla.mastermind.models.Registry{
- mementoList: ArrayList<Memento>
- game: Game
- firstPrevious: int
~ Registry(Game)
~ reset()
~ registry()
~ undoable(): boolean
~ redoable(): boolean
~ undo(Game)
~ redo(Game)
}
usantatecla.mastermind.models.Registry *-down-> usantatecla.mastermind.models.Memento
usantatecla.mastermind.models.Registry *-down-> ArrayList
usantatecla.mastermind.models.Registry --> usantatecla.mastermind.models.Game

class  usantatecla.mastermind.models.Session{
- state: State
- game: Game
- registry: Registry
+ Session()
+ next()
+ addProposeCombination(List<Color>)
+ undoable(): boolean
+ redoable(): boolean
+ getWidth(): int
+ undo()
+ getValueState(): StateValue
+ isWinner(): boolean
+ getAttempts(): int
+ redo()
+ getColors(int): List<Color>
+ isLooser(): boolean
+ clearGame()
+ getBlacks(int): int
+ getWhites(int): int
}
usantatecla.mastermind.models.Session *-down-> usantatecla.mastermind.models.Registry
usantatecla.mastermind.models.Session *-down-> usantatecla.mastermind.models.State
usantatecla.mastermind.models.Session *-down-> usantatecla.mastermind.models.Game
usantatecla.mastermind.models.Session ..> usantatecla.mastermind.models.ProposedCombination
@enduml

@startuml usantatecla.utils
class BufferedReader as "java.io.BufferedReader"{}
class ArrayList as "java.util.ArrayList"{}
enum usantatecla.utils.ColorCode{
+ RED
+ BLUE
+ YELLOW
+ GREEN
+ ORANGE
+ PURPLE
+ RESET_COLOR
- color: String
~ ColorCode(String)
+ getColor(): String
+ {static} getColorByIndex(int): String
}

class usantatecla.utils.Console{
- {static} console: Console
+ {static} getInstance(): Console
+ readString(String): String
+ readString(): String
+ readInt(String): int
+ readChar(String): char
+ writeln()
+ write(String)
+ writeln(String)
+ write(char)
- writeError(String)
}
usantatecla.utils.Console *-down-> BufferedReader

class  usantatecla.utils.YesNoDialog{
- {static} AFIRMATIVE: char
- {static} NEGATIVE: char
- {static} QUESTION: String
- {static} MESSAGE: String
+ YesNoDialog()
+ read(String): boolean
- {static} isAfirmative(char): boolean
- {static} isNegative(char): boolean
}
usantatecla.utils.YesNoDialog ..> usantatecla.utils.Console

class  usantatecla.utils.ClosedInterval{
- min: int
- max: int
+ ClosedInterval(int, int)
+ includes(int): boolean
}

abstract  usantatecla.utils.Command{
# title: String
# Command(String)
# {abstract} execute()
# {abstract} isActive(): boolean
~ getTitle(): String
}
usantatecla.utils.Console <|-down- usantatecla.utils.Command

abstract  usantatecla.utils.Menu{
- {static} OPTION: String
- commandList: ArrayList<Command>
+ Menu()
+ execute()
# addCommand(Command)
}
usantatecla.utils.Console <|-down- usantatecla.utils.Menu
usantatecla.utils.Menu *-down-> ArrayList
usantatecla.utils.Menu --> usantatecla.utils.Command
@enduml
