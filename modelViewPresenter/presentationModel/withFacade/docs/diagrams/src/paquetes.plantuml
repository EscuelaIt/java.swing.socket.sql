@startuml mastermind
class  mastermind.ConsoleMastermind{
+ ConsoleMastermind()
+ {static} main(String[]): void
# createView(Logic): View
}
mastermind.Mastermind <|-down- mastermind.ConsoleMastermind

class  mastermind.GraphicsMastermind{
+ GraphicsMastermind()
+ {static} main(String[]): void
# createView(Logic): View
}
mastermind.Mastermind <|-down- mastermind.GraphicsMastermind

class  mastermind.Mastermind{
- logic: Logic
- view: View
# Mastermind()
# {abstract} createView(Logic): View
# play(): void
}
mastermind.Mastermind --> mastermind.controllers.Logic
mastermind.Mastermind --> mastermind.views.View
@enduml

@startuml usantatecla.mastermind.views
class  mastermind.views.Color{
+ {static} RED: Color
+ {static} BLUE: Color
+ {static} YELLOW: Color
+ {static} GREEN: Color
+ {static} ORANGE: Color
+ {static} PURPLE: Color
- initial: char
- Color(char)
+ {static} valueOf(String): Color
+ {static} getInstance(char): Color
+ {static} getInstance(int): Color
+ {static} allInitials(): String
+ getInitial(): char
}

class  mastermind.views.Error{
+ {static} DUPLICATED: Error
+ {static} WRONG_CHARACTERS: Error
+ {static} WRONG_LENGTH: Error
- message: String
- Error(String)
+ {static} valueOf(String): Error
+ getMessage(): String
}

class  mastermind.views.Message{
+ {static} TURN: Message
+ {static} SECRET: Message
+ {static} RESUME: Message
+ {static} RESULT: Message
+ {static} PROPOSED_COMBINATION: Message
+ {static} TITLE: Message
+ {static} WINNER: Message
+ {static} LOOSER: Message
- message: String
- Message(String)
+ {static} valueOf(String): Message
+ getMessage(): String
}

class  mastermind.views.View{
# logic: Logic
+ View(Logic)
# {abstract} start(): void
# {abstract} resume(): boolean
+ interact(): void
# {abstract} propose(): boolean
}
mastermind.views.View *-down-> mastermind.controllers.Logic
@enduml

@startuml usantatecla.mastermind.console
class  mastermind.views.console.ConsoleView{
- startView: StartView
- proposalView: ProposalView
- resumeView: ResumeView
+ ConsoleView(Logic)
# start(): void
# resume(): boolean
# propose(): boolean
}
mastermind.views.View <|-down- mastermind.views.console.ConsoleView
mastermind.views.console.ConsoleView *-down-> mastermind.views.console.ProposalView
mastermind.views.console.ConsoleView *-down-> mastermind.views.console.ResumeView
mastermind.views.console.ConsoleView *-down-> mastermind.views.console.StartView

class  mastermind.views.console.ProposalView{
~ ProposalView()
~ interact(Logic): boolean
}
mastermind.utils.WithConsoleView <|-down- mastermind.views.console.ProposalView
mastermind.views.console.ProposalView ..> mastermind.controllers.Logic
mastermind.views.console.ProposalView ..> mastermind.views.console.SecretCombinationView
mastermind.views.console.ProposalView ..> mastermind.views.console.ProposedCombinationView
mastermind.views.console.ProposalView ..> mastermind.views.console.ResultView

class  mastermind.views.console.ProposedCombinationView{
- {static} ERROR_CODE: int
~ ProposedCombinationView()
~ write(int[]): void
~ read(): int[]
}
mastermind.utils.WithConsoleView <|-down- mastermind.views.console.ProposedCombinationView

class  mastermind.views.console.ResultView{
~ ResultView()
~ writeln(int[]): void
}
mastermind.utils.WithConsoleView <|-down- mastermind.views.console.ResultView

class  mastermind.views.console.ResumeView{
~ ResumeView()
~ interact(Logic): boolean
}
mastermind.views.console.ResumeView ..> mastermind.controllers.Logic

class  mastermind.views.console.SecretCombinationView{
~ SecretCombinationView()
~ writeln(int): void
}
mastermind.utils.WithConsoleView <|-down- mastermind.views.console.SecretCombinationView

class  mastermind.views.console.StartView{
~ StartView()
~ interact(Logic): void
}
mastermind.utils.WithConsoleView <|-down- mastermind.views.console.StartView
mastermind.views.console.StartView ..> mastermind.controllers.Logic
@enduml

@startuml usantatecla.mastermind.controllers
class  mastermind.controllers.Controller{
# game: Game
~ Controller(Game)
}
mastermind.controllers.Controller -down-> mastermind.models.Game

class  mastermind.controllers.Logic{
+ {static} NO_ERROR: int
- game: Game
- startController: StartController
- proposalController: ProposalController
- resumeController: ResumeController
+ Logic()
+ resume(boolean): void
+ proposeCombination(int[]): int
+ getAllCodes(): int[][][]
+ isWinner(): boolean
+ getTurn(): int
+ getWidth(): int
+ isLooser(): boolean
}
mastermind.controllers.Logic *-down-> mastermind.controllers.ResumeController
mastermind.controllers.Logic *-down-> mastermind.controllers.StartController
mastermind.controllers.Logic *-down-> mastermind.controllers.ProposalController
mastermind.controllers.Logic *-down-> mastermind.models.Game

class  mastermind.controllers.ProposalController{
~ ProposalController(Game)
~ proposeCombination(int[]): int
~ getAllCodes(): int[][][]
~ isWinner(): boolean
~ getTurn(): int
~ isLooser(): boolean
}
mastermind.controllers.Controller <|-down- mastermind.controllers.ProposalController

class  mastermind.controllers.ResumeController{
~ ResumeController(Game)
~ resume(boolean): void
}
mastermind.controllers.Controller <|-down- mastermind.controllers.ResumeController

class  mastermind.controllers.StartController{
+ StartController(Game)
~ getWidth(): int
}
mastermind.controllers.Controller <|-down- mastermind.controllers.StartController
@enduml

@startuml usantatecla.mastermind.models
class  mastermind.models.Color{
+ {static} RED: Color
+ {static} BLUE: Color
+ {static} YELLOW: Color
+ {static} GREEN: Color
+ {static} ORANGE: Color
+ {static} PURPLE: Color
- Color()
+ {static} valueOf(String): Color
~ {static} length(): int
~ {static} getInstance(int): Color
}

class  mastermind.models.Combination{
- {static} WIDTH: int
# colors: List<Color>
# Combination()
+ {static} getWidth(): int
}
mastermind.models.Combination *-down-> java.util.List
mastermind.models.Combination *-down-> mastermind.models.Color

class  mastermind.models.Error{
+ {static} DUPLICATED: Error
+ {static} WRONG_CHARACTERS: Error
+ {static} WRONG_LENGTH: Error
- Error()
+ {static} valueOf(String): Error
}

class  mastermind.models.Game{
- {static} MAX_LONG: int
- secretCombination: SecretCombination
- proposedCombinations: List<ProposedCombination>
- results: List<Result>
- turn: int
+ Game()
+ clear(): void
+ proposeCombination(ProposedCombination): void
+ getTurn(): int
+ isLooser(): boolean
+ getWidth(): int
+ isWinner(): boolean
+ getCodes(): int[][][]
}
mastermind.models.Game *-down-> java.util.List
mastermind.models.Game *-down-> mastermind.models.SecretCombination
mastermind.models.Game *-down-> mastermind.models.Result
mastermind.models.Game --> mastermind.models.ProposedCombination

class  mastermind.models.ProposedCombination{
+ ProposedCombination()
~ contains(Color): boolean
~ contains(Color, int): boolean
+ {static} getInstance(int[]): ProposedCombination
+ {static} isValid(int[]): Error
~ getCodes(): int[]
}
mastermind.models.Combination <|-down- mastermind.models.ProposedCombination
mastermind.models.ProposedCombination ..> mastermind.models.Error

class  mastermind.models.Result{
- blacks: int
- whites: int
~ Result(int, int)
~ isWinner(): boolean
~ getCodes(): int[]
}

class  mastermind.models.SecretCombination{
~ SecretCombination()
~ getResult(ProposedCombination): Result
}
mastermind.models.Combination <|-down- mastermind.models.SecretCombination
mastermind.models.SecretCombination ..> mastermind.models.Result
mastermind.models.SecretCombination ..> mastermind.models.ProposedCombination
@enduml

@startuml usantatecla.utils

class  mastermind.utils.ClosedInterval{
- min: int
- max: int
+ ClosedInterval(int, int)
+ includes(int): boolean
}

class  mastermind.utils.Console{
- bufferedReader: BufferedReader
+ Console()
+ write(char): void
+ write(String): void
+ readInt(String): int
+ readChar(String): char
+ readString(String): String
+ writeln(int): void
+ writeln(String): void
+ writeln(): void
- writeError(String): void
}
mastermind.utils.Console *-down-> java.io.BufferedReader

class  mastermind.utils.WithConsoleView{
# console: Console
# WithConsoleView()
}
mastermind.utils.WithConsoleView *-down-> mastermind.utils.Console

class  mastermind.utils.YesNoDialog{
- {static} AFIRMATIVE: char
- {static} NEGATIVE: char
- {static} QUESTION: String
- {static} MESSAGE: String
+ YesNoDialog()
+ read(String): boolean
- {static} isNegative(char): boolean
- {static} isAfirmative(char): boolean
}
mastermind.utils.WithConsoleView <|-down- mastermind.utils.YesNoDialog
@enduml
